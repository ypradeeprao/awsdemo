{"version":3,"sources":["Axios.js","App.js","reportWebVitals.js","index.js"],"names":["axios","create","baseURL","responseType","ENDPOINT","socket","socketIOClient","device","undefined","App","props","login","a","post","usernumber","state","then","res","console","log","verify","emit","code","username","handleChange","e","target","name","x","setState","tophoneno","value","answerCall","callSid","client","rejectCall","disconnectCall","dialCall","phoneno","disconnectOwnCall","dialcallsid","connectTwilioClienttoServer","twilioClientToken","Twilio","debug","on","err","connection","parameters","CallSid","accept","fromphoneno","callstatus","callconnectionArray","dialstatus","data","isverified","token","req","From","To","Direction","Called","CallStatus","isexistingcall","i","callconnection","push","callsid","answeringuser","Duration","this","callconnectionArrayHtml","onClick","suggestCall","className","onChange","type","list","id","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3b77585a.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"http:localhost:3000\",\n  responseType: \"json\",\n});\n","import \"./App.css\";\nimport React from \"react\";\nimport axios from \"./Axios\";\n//import socket from \"./Socketio\";\nimport socketIOClient from \"socket.io-client\";\nimport * as Twilio from \"twilio-client\";\n//const ENDPOINT = \"http://127.0.0.1:4001\";\nconst ENDPOINT = \"https://gentle-dragon-74.loca.lt:4001\";\nconst socket = socketIOClient(ENDPOINT);\nlet device = undefined;\n//JSON.parse(localStorage.getItem(\"token\"));\n//localStorage.setItem(\"token\", JSON.stringify(\"Smith\"));\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tophoneno: \"\",\n      code: \"\",\n      fromphoneno: \"\",\n      callstatus: \"\",\n      callSid: \"\",\n      username: \"\",\n      usernumber: \"\",\n      callconnectionArray: [],\n      dialstatus: \"\",\n      dialcallsid: \"\",\n    };\n  }\n\n  componentDidMount() {\n    socket.on(\"logintoken\", (data) => {\n      console.log(\"logintoken\" + data);\n    });\n\n    socket.on(\"twilioclienttoken\", (data) => {\n      console.log(\"twilioclienttoken\");\n      console.log(data);\n      console.log(\"isverfiied\" + data.isverified);\n      this.connectTwilioClienttoServer(data.token);\n    });\n\n    socket.on(\"disconnect\", () => {\n      console.log(\"socket disconnected\");\n    });\n    socket.on(\"call-new\", (req) => {\n      let data = req.data;\n      console.log(\"call connected\");\n      console.log(data);\n      console.log(data.From);\n      console.log(data.To);\n      console.log(data.Direction);\n      console.log(data.Called);\n      console.log(data.CallSid);\n      console.log(data.CallStatus);\n\n      let callconnectionArray = this.state.callconnectionArray;\n      let isexistingcall = false;\n      for (let i in callconnectionArray) {\n        if (callconnectionArray[i].fromphoneno == data.From) {\n          callconnectionArray[i].callstatus = \"ringing\";\n          callconnectionArray[i].callSid = data.CallSid;\n          isexistingcall = true;\n        }\n      }\n      if (isexistingcall == false) {\n        let callconnection = {};\n        callconnection.fromphoneno = data.From;\n        callconnection.callstatus = \"ringing\";\n        callconnection.callSid = data.CallSid;\n        callconnectionArray.push(callconnection);\n      }\n\n      this.setState({ callconnectionArray: callconnectionArray });\n    });\n\n    socket.on(\"call-inque\", (req) => {\n      console.log(\" call is in queue\");\n      console.log(req.data);\n      console.log(req.data.CallStatus);\n      let callconnectionArray = this.state.callconnectionArray;\n      for (let i in callconnectionArray) {\n        if (callconnectionArray[i].fromphoneno == req.data.From) {\n          callconnectionArray[i].callstatus = \"inqueue\";\n        }\n      }\n      this.setState({ callconnectionArray: callconnectionArray });\n    });\n\n    socket.on(\"call-answer\", (req) => {\n      console.log(\" call is in answer\");\n      console.log(req.data);\n      console.log(req.data.CallStatus);\n      let callconnectionArray = this.state.callconnectionArray;\n      for (let i in callconnectionArray) {\n        if (callconnectionArray[i].callSid == req.data.callsid) {\n          callconnectionArray[i].callstatus = \"answering\";\n          callconnectionArray[i].answeringuser = req.data.client;\n        }\n      }\n      this.setState({ callconnectionArray: callconnectionArray });\n    });\n\n    socket.on(\"call-disc\", (req) => {\n      console.log(\" call disc from twilio server\");\n      console.log(req.data);\n      console.log(req.data.CallStatus);\n      console.log(req.data.Duration);\n\n      let callconnectionArray = this.state.callconnectionArray;\n      for (let i in callconnectionArray) {\n        if (callconnectionArray[i].fromphoneno == req.data.From) {\n          callconnectionArray[i].callstatus = \"disconnected\";\n        }\n      }\n      this.setState({ callconnectionArray: callconnectionArray });\n    });\n\n    socket.on(\"dialowncall\", (req) => {\n      console.log(\" dialowncall\");\n      console.log(req.data.CallSid);\n      console.log(req.data.client);\n      let callconnectionArray = this.state.username;\n      if (this.state.username == req.data.client) {\n        this.setState({ dialstatus: \"dialing\", dialcallsid: req.data.CallSid });\n      }\n    });\n  }\n\n  login = async () => {\n    await axios\n      .post(ENDPOINT + \"/login\", {\n        usernumber: this.state.usernumber,\n      })\n      .then((res) => {\n        console.log(res);\n      });\n  };\n\n  verify = async () => {\n    socket.emit(\"sendverifycheck\", {\n      usernumber: this.state.usernumber,\n      code: this.state.code,\n      username: this.state.username,\n    });\n\n    // let res = await axios\n    //   .post(\"http://localhost:4001/sendverifycheck\", {\n    //     phone: this.state.usernumber,\n    //     code: this.state.code,\n    //   })\n    //   .then((res) => {\n    //     console.log(JSON.stringify(res));\n    //    // socket.emit(\"gettwilioclienttoken\", { username: this.state.username });\n    //     return res;\n    //   });\n    // console.log(JSON.stringify(res));\n  };\n\n  handleChange = (e) => {\n    console.log(e.target.name);\n    let x = e.target.name;\n    if (x == \"tophoneno\") {\n      this.setState({ tophoneno: e.target.value });\n    }\n    if (x == \"code\") {\n      this.setState({ code: e.target.value });\n    }\n    if (x == \"usernumber\") {\n      this.setState({ usernumber: e.target.value });\n    }\n    if (x == \"username\") {\n      this.setState({ username: e.target.value });\n    }\n\n    console.log(this.state);\n  };\n\n  answerCall = (x) => {\n    console.log(x);\n    socket.emit(\"answercall\", {\n      callSid: x,\n      client: this.state.username,\n    });\n  };\n\n  rejectCall = (x) => {\n    socket.emit(\"rejectcall\", { callSid: x });\n  };\n\n  disconnectCall = (x) => {\n    console.log(x);\n    socket.emit(\"disconnectcall\", {\n      callSid: x,\n      client: this.state.username,\n    });\n  };\n\n  dialCall = () => {\n    socket.emit(\"dialcall\", {\n      phoneno: this.state.tophoneno,\n      client: this.state.username,\n    });\n  };\n\n  disconnectOwnCall = (x) => {\n    console.log(this.state.dialcallsid);\n    console.log(this.state.username);\n    socket.emit(\"disconnectownCall\", {\n      callSid: this.state.dialcallsid,\n      client: this.state.username,\n    });\n  };\n\n  connectTwilioClienttoServer = (twilioClientToken) => {\n    console.log(twilioClientToken);\n    device = new Twilio.Device(twilioClientToken, { debug: true });\n    device.on(\"error\", (err) => {\n      console.log(err);\n    });\n    device.on(\"incoming\", (connection) => {\n      console.log(\"incoming frm twilio\");\n      console.log(connection.parameters.CallSid);\n      this.setState({ callSid: connection.parameters.CallSid });\n      connection.accept();\n    });\n  };\n\n  render() {\n    let { callconnectionArray } = this.state;\n    let callconnectionArrayHtml = [];\n    for (let i in callconnectionArray) {\n      console.log(callconnectionArray[i]);\n      callconnectionArrayHtml.push(\n        <div>\n          {callconnectionArray[i].callstatus == \"ringing\" ? (\n            <>{callconnectionArray[i].fromphoneno} is calling</>\n          ) : (\n            \"\"\n          )}\n          {callconnectionArray[i].callstatus == \"inqueue\" ? (\n            <>{callconnectionArray[i].fromphoneno} is inqueue</>\n          ) : (\n            \"\"\n          )}\n          {callconnectionArray[i].callstatus == \"disconnected\" ? (\n            <>{callconnectionArray[i].fromphoneno} is disconnected</>\n          ) : (\n            \"\"\n          )}\n          {callconnectionArray[i].callstatus == \"answering\" ? (\n            <>\n              {callconnectionArray[i].fromphoneno} is answering by{\" \"}\n              {callconnectionArray[i].answeringuser}\n            </>\n          ) : (\n            \"\"\n          )}\n          <div>\n            <button\n              onClick={() => this.answerCall(callconnectionArray[i].callSid)}\n            >\n              Answer call\n            </button>\n            <button\n              onClick={() =>\n                this.disconnectCall(callconnectionArray[i].callSid)\n              }\n            >\n              Disconnect call\n            </button>\n            <button\n              onClick={() => this.suggestCall(callconnectionArray[i].callSid)}\n            >\n              Suggest call\n            </button>\n            <button\n              onClick={() => this.rejectCall(callconnectionArray[i].callSid)}\n            >\n              Reject call\n            </button>\n          </div>\n        </div>\n      );\n    }\n    return (\n      <div className=\"App\">\n        <div>\n          Myusername <input name=\"username\" onChange={this.handleChange} />\n          Mynumber\n          <input\n            type=\"text\"\n            name=\"usernumber\"\n            list=\"exampleList\"\n            onChange={this.handleChange}\n          />\n          <datalist id=\"exampleList\">\n            <option value=\"+15102400591\" />\n            <option value=\"+1‪5107365704‬\" />\n          </datalist>\n          <button\n            onClick={this.login}\n            name=\"usernumber\"\n            onChange={this.handleChange}\n          >\n            Login\n          </button>\n        </div>\n        <br />\n        <div>\n          Verify code <input name=\"code\" onChange={this.handleChange} />{\" \"}\n          <button onClick={this.verify}>verify</button>\n        </div>\n        <br />\n        <div>\n          Dialing Numberrr\n          <input name=\"tophoneno\" onChange={this.handleChange} />\n          <button onClick={this.dialCall}>Dial</button>\n          <button onClick={this.disconnectOwnCall}>Disconnect call</button>\n          {this.state.dialstatus}\n        </div>\n        <br />\n\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        {callconnectionArrayHtml}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}