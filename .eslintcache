[{"/Users/pradeep/Desktop/nventweb/twilioudemy1/frontend/src/App.js":"1","/Users/pradeep/Desktop/nventweb/twilioudemy1/frontend/src/index.js":"2","/Users/pradeep/Desktop/nventweb/twilioudemy1/frontend/src/reportWebVitals.js":"3","/Users/pradeep/Desktop/nventweb/twilioudemy1/frontend/src/axios.js":"4","/Users/pradeep/Desktop/nventweb/twilioudemy1/frontend/src/Axios.js":"5","/Users/pradeep/Desktop/nventweb/twilioudemy1/frontend/src/Socketio.js":"6","/Users/pradeep/Desktop/nventweb/twilioudemy1/frontend/src/chat.js":"7"},{"size":9664,"mtime":1608721312464,"results":"8","hashOfConfig":"9"},{"size":478,"mtime":1606782008102,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1606440099936,"results":"11","hashOfConfig":"9"},{"size":108,"mtime":1606580218581,"results":"12","hashOfConfig":"9"},{"size":120,"mtime":1606588618413,"results":"13","hashOfConfig":"9"},{"size":87,"mtime":1606599818732,"results":"14","hashOfConfig":"9"},{"size":468,"mtime":1606777713478,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"1grgqa6",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/pradeep/Desktop/nventweb/twilioudemy1/frontend/src/App.js",["32","33","34","35","36","37","38","39","40","41","42","43","44","45","46"],"import \"./App.css\";\nimport React from \"react\";\nimport axios from \"./Axios\";\n//import socket from \"./Socketio\";\nimport socketIOClient from \"socket.io-client\";\nimport * as Twilio from \"twilio-client\";\nconst ENDPOINT = \"http://127.0.0.1:4001\";\n//const ENDPOINT = \"https://hot-lizard-29.loca.lt:4001\";\nconst socket = socketIOClient(ENDPOINT);\nlet device = undefined;\n//JSON.parse(localStorage.getItem(\"token\"));\n//localStorage.setItem(\"token\", JSON.stringify(\"Smith\"));\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tophoneno: \"\",\n      code: \"\",\n      fromphoneno: \"\",\n      callstatus: \"\",\n      callSid: \"\",\n      username: \"\",\n      usernumber: \"\",\n      callconnectionArray: [],\n      dialstatus: \"\",\n      dialcallsid: \"\",\n    };\n  }\n\n  componentDidMount() {\n    socket.on(\"logintoken\", (data) => {\n      console.log(\"logintoken\" + data);\n    });\n\n    socket.on(\"twilioclienttoken\", (data) => {\n      console.log(\"twilioclienttoken\");\n      console.log(data);\n      console.log(\"isverfiied\" + data.isverified);\n      this.connectTwilioClienttoServer(data.token);\n    });\n\n    socket.on(\"disconnect\", () => {\n      console.log(\"socket disconnected\");\n    });\n    socket.on(\"call-new\", (req) => {\n      let data = req.data;\n      console.log(\"call connected\");\n      console.log(data);\n      console.log(data.From);\n      console.log(data.To);\n      console.log(data.Direction);\n      console.log(data.Called);\n      console.log(data.CallSid);\n      console.log(data.CallStatus);\n\n      let callconnectionArray = this.state.callconnectionArray;\n      let isexistingcall = false;\n      for (let i in callconnectionArray) {\n        if (callconnectionArray[i].fromphoneno == data.From) {\n          callconnectionArray[i].callstatus = \"ringing\";\n          callconnectionArray[i].callSid = data.CallSid;\n          isexistingcall = true;\n        }\n      }\n      if (isexistingcall == false) {\n        let callconnection = {};\n        callconnection.fromphoneno = data.From;\n        callconnection.callstatus = \"ringing\";\n        callconnection.callSid = data.CallSid;\n        callconnectionArray.push(callconnection);\n      }\n\n      this.setState({ callconnectionArray: callconnectionArray });\n    });\n\n    socket.on(\"call-inque\", (req) => {\n      console.log(\" call is in queue\");\n      console.log(req.data);\n      console.log(req.data.CallStatus);\n      let callconnectionArray = this.state.callconnectionArray;\n      for (let i in callconnectionArray) {\n        if (callconnectionArray[i].fromphoneno == req.data.From) {\n          callconnectionArray[i].callstatus = \"inqueue\";\n        }\n      }\n      this.setState({ callconnectionArray: callconnectionArray });\n    });\n\n    socket.on(\"call-answer\", (req) => {\n      console.log(\" call is in answer\");\n      console.log(req.data);\n      console.log(req.data.CallStatus);\n      let callconnectionArray = this.state.callconnectionArray;\n      for (let i in callconnectionArray) {\n        if (callconnectionArray[i].callSid == req.data.callsid) {\n          callconnectionArray[i].callstatus = \"answering\";\n          callconnectionArray[i].answeringuser = req.data.client;\n        }\n      }\n      this.setState({ callconnectionArray: callconnectionArray });\n    });\n\n    socket.on(\"call-disc\", (req) => {\n      console.log(\" call disc from twilio server\");\n      console.log(req.data);\n      console.log(req.data.CallStatus);\n      console.log(req.data.Duration);\n\n      let callconnectionArray = this.state.callconnectionArray;\n      for (let i in callconnectionArray) {\n        if (callconnectionArray[i].fromphoneno == req.data.From) {\n          callconnectionArray[i].callstatus = \"disconnected\";\n        }\n      }\n      this.setState({ callconnectionArray: callconnectionArray });\n    });\n\n    socket.on(\"dialowncall\", (req) => {\n      console.log(\" dialowncall\");\n      console.log(req.data.CallSid);\n      console.log(req.data.client);\n      let callconnectionArray = this.state.username;\n      if (this.state.username == req.data.client) {\n        this.setState({ dialstatus: \"dialing\", dialcallsid: req.data.CallSid });\n      }\n    });\n  }\n\n  login = async () => {\n    await axios\n      .post(ENDPOINT + \"/login\", {\n        usernumber: this.state.usernumber,\n      })\n      .then((res) => {\n        console.log(res);\n      });\n  };\n\n  verify = async () => {\n    socket.emit(\"sendverifycheck\", {\n      usernumber: this.state.usernumber,\n      code: this.state.code,\n      username: this.state.username,\n    });\n\n    // let res = await axios\n    //   .post(\"http://localhost:4001/sendverifycheck\", {\n    //     phone: this.state.usernumber,\n    //     code: this.state.code,\n    //   })\n    //   .then((res) => {\n    //     console.log(JSON.stringify(res));\n    //    // socket.emit(\"gettwilioclienttoken\", { username: this.state.username });\n    //     return res;\n    //   });\n    // console.log(JSON.stringify(res));\n  };\n\n  handleChange = (e) => {\n    console.log(e.target.name);\n    let x = e.target.name;\n    if (x == \"tophoneno\") {\n      this.setState({ tophoneno: e.target.value });\n    }\n    if (x == \"code\") {\n      this.setState({ code: e.target.value });\n    }\n    if (x == \"usernumber\") {\n      this.setState({ usernumber: e.target.value });\n    }\n    if (x == \"username\") {\n      this.setState({ username: e.target.value });\n    }\n\n    console.log(this.state);\n  };\n\n  answerCall = (x) => {\n    console.log(x);\n    socket.emit(\"answercall\", {\n      callSid: x,\n      client: this.state.username,\n    });\n  };\n\n  rejectCall = (x) => {\n    socket.emit(\"rejectcall\", { callSid: x });\n  };\n\n  disconnectCall = (x) => {\n    console.log(x);\n    socket.emit(\"disconnectcall\", {\n      callSid: x,\n      client: this.state.username,\n    });\n  };\n\n  dialCall = () => {\n    socket.emit(\"dialcall\", {\n      phoneno: this.state.tophoneno,\n      client: this.state.username,\n    });\n  };\n\n  disconnectOwnCall = (x) => {\n    console.log(this.state.dialcallsid);\n    console.log(this.state.username);\n    socket.emit(\"disconnectownCall\", {\n      callSid: this.state.dialcallsid,\n      client: this.state.username,\n    });\n  };\n\n  connectTwilioClienttoServer = (twilioClientToken) => {\n    console.log(twilioClientToken);\n    device = new Twilio.Device(twilioClientToken, { debug: true });\n    device.on(\"error\", (err) => {\n      console.log(err);\n    });\n    device.on(\"incoming\", (connection) => {\n      console.log(\"incoming frm twilio\");\n      console.log(connection.parameters.CallSid);\n      this.setState({ callSid: connection.parameters.CallSid });\n      connection.accept();\n    });\n  };\n\n  render() {\n    let { callconnectionArray } = this.state;\n    let callconnectionArrayHtml = [];\n    for (let i in callconnectionArray) {\n      console.log(callconnectionArray[i]);\n      callconnectionArrayHtml.push(\n        <div>\n          {callconnectionArray[i].callstatus == \"ringing\" ? (\n            <>{callconnectionArray[i].fromphoneno} is calling</>\n          ) : (\n            \"\"\n          )}\n          {callconnectionArray[i].callstatus == \"inqueue\" ? (\n            <>{callconnectionArray[i].fromphoneno} is inqueue</>\n          ) : (\n            \"\"\n          )}\n          {callconnectionArray[i].callstatus == \"disconnected\" ? (\n            <>{callconnectionArray[i].fromphoneno} is disconnected</>\n          ) : (\n            \"\"\n          )}\n          {callconnectionArray[i].callstatus == \"answering\" ? (\n            <>\n              {callconnectionArray[i].fromphoneno} is answering by{\" \"}\n              {callconnectionArray[i].answeringuser}\n            </>\n          ) : (\n            \"\"\n          )}\n          <div>\n            <button\n              onClick={() => this.answerCall(callconnectionArray[i].callSid)}\n            >\n              Answer call\n            </button>\n            <button\n              onClick={() =>\n                this.disconnectCall(callconnectionArray[i].callSid)\n              }\n            >\n              Disconnect call\n            </button>\n            <button\n              onClick={() => this.suggestCall(callconnectionArray[i].callSid)}\n            >\n              Suggest call\n            </button>\n            <button\n              onClick={() => this.rejectCall(callconnectionArray[i].callSid)}\n            >\n              Reject call\n            </button>\n          </div>\n        </div>\n      );\n    }\n    return (\n      <div className=\"App\">\n        <div>\n          Myusername <input name=\"username\" onChange={this.handleChange} />\n          Mynumber\n          <input\n            type=\"text\"\n            name=\"usernumber\"\n            list=\"exampleList\"\n            onChange={this.handleChange}\n          />\n          <datalist id=\"exampleList\">\n            <option value=\"+15102400591\" />\n            <option value=\"+1‪5107365704‬\" />\n          </datalist>\n          <button\n            onClick={this.login}\n            name=\"usernumber\"\n            onChange={this.handleChange}\n          >\n            Login\n          </button>\n        </div>\n        <br />\n        <div>\n          Verify code <input name=\"code\" onChange={this.handleChange} />{\" \"}\n          <button onClick={this.verify}>verify</button>\n        </div>\n        <br />\n        <div>\n          Dialing Number\n          <input name=\"tophoneno\" onChange={this.handleChange} />\n          <button onClick={this.dialCall}>Dial</button>\n          <button onClick={this.disconnectOwnCall}>Disconnect call</button>\n          {this.state.dialstatus}\n        </div>\n        <br />\n\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        {callconnectionArrayHtml}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/Users/pradeep/Desktop/nventweb/twilioudemy1/frontend/src/index.js",[],["47","48"],"/Users/pradeep/Desktop/nventweb/twilioudemy1/frontend/src/reportWebVitals.js",[],"/Users/pradeep/Desktop/nventweb/twilioudemy1/frontend/src/axios.js",[],"/Users/pradeep/Desktop/nventweb/twilioudemy1/frontend/src/Axios.js",[],"/Users/pradeep/Desktop/nventweb/twilioudemy1/frontend/src/Socketio.js",[],"/Users/pradeep/Desktop/nventweb/twilioudemy1/frontend/src/chat.js",[],{"ruleId":"49","severity":1,"message":"50","line":60,"column":48,"nodeType":"51","messageId":"52","endLine":60,"endColumn":50},{"ruleId":"49","severity":1,"message":"50","line":66,"column":26,"nodeType":"51","messageId":"52","endLine":66,"endColumn":28},{"ruleId":"49","severity":1,"message":"50","line":83,"column":48,"nodeType":"51","messageId":"52","endLine":83,"endColumn":50},{"ruleId":"49","severity":1,"message":"50","line":96,"column":44,"nodeType":"51","messageId":"52","endLine":96,"endColumn":46},{"ruleId":"49","severity":1,"message":"50","line":112,"column":48,"nodeType":"51","messageId":"52","endLine":112,"endColumn":50},{"ruleId":"53","severity":1,"message":"54","line":123,"column":11,"nodeType":"55","messageId":"56","endLine":123,"endColumn":30},{"ruleId":"49","severity":1,"message":"50","line":124,"column":31,"nodeType":"51","messageId":"52","endLine":124,"endColumn":33},{"ruleId":"49","severity":1,"message":"50","line":163,"column":11,"nodeType":"51","messageId":"52","endLine":163,"endColumn":13},{"ruleId":"49","severity":1,"message":"50","line":166,"column":11,"nodeType":"51","messageId":"52","endLine":166,"endColumn":13},{"ruleId":"49","severity":1,"message":"50","line":169,"column":11,"nodeType":"51","messageId":"52","endLine":169,"endColumn":13},{"ruleId":"49","severity":1,"message":"50","line":172,"column":11,"nodeType":"51","messageId":"52","endLine":172,"endColumn":13},{"ruleId":"49","severity":1,"message":"50","line":236,"column":46,"nodeType":"51","messageId":"52","endLine":236,"endColumn":48},{"ruleId":"49","severity":1,"message":"50","line":241,"column":46,"nodeType":"51","messageId":"52","endLine":241,"endColumn":48},{"ruleId":"49","severity":1,"message":"50","line":246,"column":46,"nodeType":"51","messageId":"52","endLine":246,"endColumn":48},{"ruleId":"49","severity":1,"message":"50","line":251,"column":46,"nodeType":"51","messageId":"52","endLine":251,"endColumn":48},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'callconnectionArray' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["61"],"no-negated-in-lhs",["62"],"no-global-assign","no-unsafe-negation"]